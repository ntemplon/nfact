/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tester;

import dynamics.AeroSystemState;
import dynamics.TestSystem;
import function.Function.FuncPoint;
import function.SingleVariableFunction;
import function.SingleVariableTableFunction;
import geometry.angle.Angle;
import geometry.angle.Angle.AngleType;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import propulsion.rocket.HobbyRocketEngine;

/**
 *
 * @author nathant
 */
public class TestForm extends javax.swing.JFrame {

    // Static Methods
    public static HobbyRocketEngine getRocketEngine() {
        return HobbyRocketEngine.G25;
    }

    // Fields
    private final HobbyRocketEngine engine;

    /**
     * Creates new form TestForm
     */
    public TestForm() {
        initComponents();

        this.engine = getRocketEngine();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        contentPanel = new javax.swing.JPanel();
        simulateButton = new javax.swing.JButton();
        enginePanel = new javax.swing.JPanel();
        rocketEngineLabel = new javax.swing.JLabel();
        engineTextField = new javax.swing.JTextField();
        fillerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NFACalc");
        setMinimumSize(new java.awt.Dimension(500, 300));

        contentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        contentPanel.setLayout(new java.awt.GridBagLayout());

        simulateButton.setText("Run Simulation");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        contentPanel.add(simulateButton, gridBagConstraints);

        enginePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Engine Selection"));
        enginePanel.setLayout(new java.awt.GridBagLayout());

        rocketEngineLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        rocketEngineLabel.setText("Rocket Engine");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        enginePanel.add(rocketEngineLabel, gridBagConstraints);

        engineTextField.setText("G-78");
        engineTextField.setToolTipText("");
        engineTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        enginePanel.add(engineTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        enginePanel.add(fillerPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        contentPanel.add(enginePanel, gridBagConstraints);

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
        TestSystem system = new TestSystem(engine);

        File file = new File("/home/nathan/output.csv");
        try (FileWriter fw = new FileWriter(file)) {
            try (PrintWriter pw = new PrintWriter(fw)) {

                AeroSystemState state = system.getState();
                pw.println("Time,X Pos,Z Pos,Theta,X Vel,Z Vel,Omega,Speed,Q,Flight Path,Angle of Attack,CL,CD,CPM,Thrust,X Accel,Z Accel,Angle Accel");
                pw.println(state.getTime() + "," + state.getXPosition() + "," + state.getZPosition() + ","
                        + state.getAngularPosition().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180) + ","
                        + state.getXVelocity() + "," + state.getZVelocity() + "," + state.getAngularVelocity() + "," + state.getSpeed() + ","
                        + state.getDynamicPressure() + "," + state.getFlightPathAngle().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180)
                        + "," + state.getAngleOfAttack().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180) + "," + state.getCl()
                        + "," + state.getCd() + "," + state.getCpm() + "," + state.getThrust() + "," + state.getXAcceleration() + ","
                        + state.getZAcceleration() + "," + state.getAngularAcceleration());

                double maxQ = 0;
                double maxH = 0;
                boolean thresholdReached = false;
                int i = 0;
                while(system.getState().getZVelocity() > 0 || !thresholdReached) {
                    system.updateState(0.0005);
                    if (system.getState().getDynamicPressure() > maxQ) {
                        maxQ = system.getState().getDynamicPressure();
                    }
                    if (system.getState().getZPosition() > maxQ) {
                        maxH = system.getState().getZPosition();
                    }
                    if (system.getState().getDynamicPressure() > 1) {
                        thresholdReached = true;
                    }
                    state = system.getState();

                    if ((i + 1) % 100 == 0) {
                        pw.println(state.getTime() + "," + state.getXPosition() + "," + state.getZPosition() + ","
                                + state.getAngularPosition().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180) + ","
                                + state.getXVelocity() + "," + state.getZVelocity() + "," + state.getAngularVelocity() + "," + state.getSpeed() + ","
                                + state.getDynamicPressure() + "," + state.getFlightPathAngle().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180)
                                + "," + state.getAngleOfAttack().getMeasure(AngleType.DEGREES, Angle.MeasureRange.PlusMin180) + "," + state.getCl()
                                + "," + state.getCd() + "," + state.getCpm() + "," + state.getThrust() + "," + state.getXAcceleration() + ","
                                + state.getZAcceleration() + "," + state.getAngularAcceleration());
                    }
                    
                    i++;
                }

                JOptionPane.showMessageDialog(this, "Simulation Comipleted!\n  MaxQ:  " + maxQ + "\n  MaxH:  " + maxH);
            }
        } catch (IOException ex) {

        }
    }//GEN-LAST:event_simulateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel enginePanel;
    private javax.swing.JTextField engineTextField;
    private javax.swing.JPanel fillerPanel;
    private javax.swing.JLabel rocketEngineLabel;
    private javax.swing.JButton simulateButton;
    // End of variables declaration//GEN-END:variables
}
